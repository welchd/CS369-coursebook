ylim=c(0, max(aDFyear$Annual_Payment)*1.3))
}
}
return(rlist)
}
netIncome <- function(gross){
convert = FALSE
if (gross>1000) {
gross = gross/1000
convert = TRUE
}
net =   (max(0,min(gross,14)))*(1-.105-.017) +(max(14,min(gross,48))-14)*(1-.175-.017) + (max(48,min(gross,70))-48)*(1-.3-.017)+ (max(70,gross)-70)*(1-.33-.017)
if (convert) net = net*1000
return(net)
}
mortgage(P = 700000)
mortgage(P = 700000, I = 4)
mortgage(P = 700000, I = 5)
mortgage(P = 700000, I = 5, interestOnly = T)
mortgage(P = 700000, I = 4, interestOnly = T)
40/275
17/40
9+14+17
A = matrix(runif(100), nrow = 10)
A
prcomp(A)
6000000/15
1725000/700
1725000/700 *1000
249/4
15(.6 * .85 + 0.4 * .)
15(.6 * .85 + 0.4 * .9)
15*(.6 * .85 + 0.4 * .9)
15*(.6 * .9 + 0.4 * .9)
15*(.6 * .9 + 0.4 * .8)
15*(.6 * .8 + 0.4 * 1)
15*(.6 * .9 + 0.4 * 0.95)
15*(.6 * .85 + 0.4 * 0.95)
15*(.6 * .8 + 0.4 * 0.8)
15*(.6 * .85 + 0.4 * 0.8)
450*70
450*70/52
31500/750000
31500/.07
70*4500
70*5000
70*30
2000000/369
624*2000000/369
write.csv(round(runif(242, min = 0, mac = 20)))
write.csv( round(runif(242, min = 0, max = 20)), "exam.csv")
92/166
98/166
62/166
62/166 - (92/166)*(98/166)
-30/166 + (92/166)*(68/166)
(92/166)*(98/166)*166
seq(50,100,by = 5)
seq(50,100,by = 5)/1.14
seq(50,100,by = 5)/1.13
90/1.14
AA = 1320
Aa = 121
aa = 15
N = AA+Aa+aa
N
pA = (2*1320+121)/(2*N)
pA
pa = 1-pA
pAA = pA^2
pAA
eAA = N*pA^2
eaa = N*pa^2
eAa = N*pA*pa*2
eAA+eAa+eaa
obs = c(AA, Aa, aa)
ex = c(eAA, eAa, eaa)
(obs - ex)^2/ex
sum((obs - ex)^2/ex)
pAA^2
0.948^2
pAA
pA^2
84/120
0.7 - (0.87*0.77)
0.7 - (0.87*0.77)
(0.87*0.77)
64*950
64*950/.7
64*950/.07
64*950/.08
17+17+15+7+12
24+29.5+18.5+22+18
14.5+8+14.5+12+8
17.5+11.5+13+7+20
prcomp(A)
64*950/.08
64*950/.07
1.04^12
147/1.15
147/1.15/11
147/1.15/9
28/60
17428.9*12
17428.9*12/1.15
library(ggplot2)
sal16 = c(41174, 47272, 54899, 62521, 92641)
qplot(sal16)
qplot(sal16, geom = bar)
qplot(sal16, geom = "bar")
plot(sal16)
sal = data.frame(lev = 3:7, salary2016 = sal16, offer2017 = sal16*1.012, flat2017 = sal16 + 1500)
sal
qplot(x = lev, y = salary2016, data = sal)
qplot(x = lev, y = salary2016, data = sal, geom = "bar")
s = data.frame(lev = c(3:7, 3:7), salary = c(sal$salary2016, sal$offer2017, sal$flat2017))
s = data.frame(lev = c(3:7), salary = c(sal$salary2016, sal$offer2017, sal$flat2017))
s
s$type = rep(c("current","offer", "TEU proposal"))
s
s$type = rep(c("current","offer", "TEU proposal"), each = 5)
s
qplot(s, x = lev, y= salary, group = type)
qplot(data = s, x = lev, y= salary, group = type)
qplot(data = s, x = lev, y= salary, group = type, geom = "bar")
ggplot(data = s)
ggplot(data = s, aes(x = lev, y = salary)) + geom_bar(stat= "identity")
ggplot(data = s, aes(x = lev, y = salary, colour = type)) + geom_bar(stat= "identity", position = "dodge")
ggplot(data = s, aes(x = lev, y = salary)) + geom_bar(aes(colour = type),stat= "identity", position = "dodge")
ggplot(data = s, aes(x = lev)) + geom_bar(aes(colour = type, y = salary),stat= "identity", position = "dodge")
ggplot(data = s, aes(x = lev)) + geom_bar(aes(colour = type, y = salary, fill = type),stat= "identity", position = "dodge")
s
s$lev = c("3 min", "4 min", "5 min", "6 min", "6 max")
s
ggplot(data = s, aes(x = lev)) + geom_bar(aes(colour = type, y = salary, fill = type),stat= "identity", position = "dodge")
ggplot(data = s, aes(x = lev)) + geom_bar(aes(colour = type, y = salary, fill = type),stat= "identity", position = "dodge") + ylab("Level")
ggplot(data = s, aes(x = lev)) + geom_bar(aes(colour = type, y = salary, fill = type),stat= "identity", position = "dodge") + ylab("Levesfdsdfdsl")
ggplot(data = s, aes(x = lev)) + geom_bar(aes(colour = type, y = salary, fill = type),stat= "identity", position = "dodge") + xlab("Level")
s$lev = factor(c("3 min", "4 min", "5 min", "6 min", "6 max"), levels = c("3 min", "4 min", "5 min", "6 min", "6 max"))
ggplot(data = s, aes(x = lev)) + geom_bar(aes(colour = type, y = salary, fill = type),stat= "identity", position = "dodge") + xlab("Level")
s
s$percentage = s$salary/rep(s$salary[1,5],3)
rep(s$salary[1,5],3)
rep(s$salary[1:5],3)
s$percentage = s$salary/rep(s$salary[1:5],3)
s
ggplot(data = s, aes(x = lev)) + geom_bar(aes( fill = type),stat= "identity", position = "dodge") + xlab("Level")
ggplot(data = s, aes(x = lev, y = percentage)) + geom_bar(aes( fill = type),stat= "identity", position = "dodge") + xlab("Level")
qplot(data  = s , x = lev, y = percentage, fill = type)
qplot(data  = s[6:15,] , x = lev, y = percentage, fill = type)
qplot(data  = s[6:15,] , x = lev, y = percentage, fill = type, geom = "bar")
qplot(data  = s[6:15,] , x = lev, y = percentage, fill = type, geom = "bar", stat = "identity")
ggplot(data = s, aes(x = lev, y = percentage)) + geom_bar(aes( fill = type),stat= "identity", position = "dodge") + xlab("Level")
ggplot(data = s[6:15], aes(x = lev, y = percentage)) + geom_bar(aes( fill = type),stat= "identity", position = "dodge") + xlab("Level")
ggplot(data = s[6:15,], aes(x = lev, y = percentage)) + geom_bar(aes( fill = type),stat= "identity", position = "dodge") + xlab("Level")
ggplot(data = s[6:15,], aes(x = lev, y = percentage)) + geom_bar(aes( fill = type),stat= "identity", position = "dodge") + xlab("Employment Level (professional staff)")
ggplot(data = s[6:15,], aes(x = lev, y = percentage)) + geom_bar(aes( fill = type),stat= "identity", position = "dodge") + xlab("Employment Level (professional staff)") + ylab("Percentage increase")
ggplot(data = s[6:15,], aes(x = lev, y = percentage)) + geom_bar(aes( fill = type),stat= "identity", position = "dodge") + xlab("Employment Level (professional staff)") + ylab("Percentage increase") + ylim(0, 2)
s$percentage = 100*(s$salary/rep(s$salary[1:5],3) - 1)
ggplot(data = s[6:15,], aes(x = lev, y = percentage)) + geom_bar(aes( fill = type),stat= "identity", position = "dodge") + xlab("Employment Level (professional staff)") + ylab("Percentage increase")
s
mortgage <- function(P=500000, I=5, L=25, period = "w", amort=F, plotData=F,interestOnly = F) {
if (period == "m") {
prd = 12
prdStr = "month"
}
if (period == "f") {
prd = 365/14
prdStr = "fortnight"
}
if (period == "w") {
prd = 365/7
prdStr = "week"
}
if (!any(period == c("m","f","w"))) stop("period must be one of \"m\", \"f\" or \"w\" (for monthly, fortnightly or weekly)")
if (interestOnly){
M = (P*I)/(100*prd)
cat("\nThe interest only ",prdStr,
"ly payments for this loan are: $", round(M), " (stored in payment)\n\n" , sep="")
rlist = list(payment = M)
} else {
J <- I/(prd * 100)
N <- prd * L
M <- P*J/(1-(1+J)^(-N))
monthPay <- M
cat("\nThe payments for this loan are:\n\t",prdStr,
"ly payment: $", round(M), " (stored in payment)\n\n" , sep="")
#	Total cost: $", M*N, "\n\n")
# Calculate Amortization for each Month
rlist = list(payment = monthPay)
if(amort==T) {
Pt <- P # current principal or amount of the loan
currP <- NULL
while(Pt>=1) {
H <- Pt * J # this is the current monthly interest
C <- M - H # this is your monthly payment minus your monthly interest, so it is the amount of principal you pay for that month
Q <- Pt - C # this is the new balance of your principal of your loan
Pt <- Q # sets P equal to Q and goes back to step 1. The loop continues until the value Q (and hence P) goes to zero
currP <- c(currP, Pt)
}
monthP <- c(P, currP[1:(length(currP)-1)])-currP
aDFmonth <- data.frame(
Amortization=c(P, currP[1:(length(currP)-1)]),
Payment=monthP+c((monthPay-monthP)[1:(length(monthP)-1)],0),
Principal=monthP,
Interest=c((monthPay-monthP)[1:(length(monthP)-1)],0),
Year=sort(rep(1:ceiling(N/prd), prd))[1:length(monthP)]
)
aDFyear <- data.frame(
Amortization=tapply(aDFmonth$Amortization, aDFmonth$Year, max),
Annual_Payment=tapply(aDFmonth$Payment, aDFmonth$Year, sum),
Annual_Principal=tapply(aDFmonth$Principal, aDFmonth$Year, sum),
Annual_Interest=tapply(aDFmonth$Interest, aDFmonth$Year, sum),
Year=as.vector(na.omit(unique(aDFmonth$Year)))
)
cat("The amortization data for each of the ", N," ", prdStr,"s are stored in \"amortPeriod\".\n\n",sep = "")
cat("The amortization data for each of the", L, "years are stored in \"amortYear\".\n\n")
rlist = c(rlist,amortYear = list(aDFyear),amortPeriod = list(aDFmonth))
}
if(plotData==T) {
barplot(t(aDFyear[,c(3,4)]),
col=c(3,4),
main="Annual Interest and Principal Payments",
sub="The data for this plot is stored in amortYear.",
xlab="Years", ylab="$ Amount",
legend.text=c("Principal", "Interest"),
ylim=c(0, max(aDFyear$Annual_Payment)*1.3))
}
}
return(rlist)
}
netIncome <- function(gross){
convert = FALSE
if (gross>1000) {
gross = gross/1000
convert = TRUE
}
net =   (max(0,min(gross,14)))*(1-.105-.017) +(max(14,min(gross,48))-14)*(1-.175-.017) + (max(48,min(gross,70))-48)*(1-.3-.017)+ (max(70,gross)-70)*(1-.33-.017)
if (convert) net = net*1000
return(net)
}
mortgage(P = 750000)
mortgage(P = 700000)
mortgage(P = 150000)
mortgage(P = 600000, L = 30)
mortgage(P = 600000, L = 30, I = 4.5)
mortgage(P = 600000, L = 30, I = 4)
mortgage <- function(P=500000, I=5, L=25, period = "w", amort=F, plotData=F,interestOnly = F) {
mortgage <- function(P=500000, I=5, L=25, period = "w", amort=F, plotData=F,interestOnly = F) {
if (period == "m") {
prd = 12
prdStr = "month"
}
if (period == "f") {
prd = 365/14
prdStr = "fortnight"
}
if (period == "w") {
prd = 365/7
prdStr = "week"
}
if (!any(period == c("m","f","w"))) stop("period must be one of \"m\", \"f\" or \"w\" (for monthly, fortnightly or weekly)")
if (interestOnly){
M = (P*I)/(100*prd)
cat("\nThe interest only ",prdStr,
"ly payments for this loan are: $", round(M), " (stored in payment)\n\n" , sep="")
rlist = list(payment = M)
} else {
J <- I/(prd * 100)
N <- prd * L
M <- P*J/(1-(1+J)^(-N))
monthPay <- M
cat("\nThe payments for this loan are:\n\t",prdStr,
"ly payment: $", round(M), " (stored in payment)\n\n" , sep="")
#	Total cost: $", M*N, "\n\n")
# Calculate Amortization for each Month
rlist = list(payment = monthPay)
if(amort==T) {
Pt <- P # current principal or amount of the loan
currP <- NULL
while(Pt>=1) {
H <- Pt * J # this is the current monthly interest
C <- M - H # this is your monthly payment minus your monthly interest, so it is the amount of principal you pay for that month
Q <- Pt - C # this is the new balance of your principal of your loan
Pt <- Q # sets P equal to Q and goes back to step 1. The loop continues until the value Q (and hence P) goes to zero
currP <- c(currP, Pt)
}
monthP <- c(P, currP[1:(length(currP)-1)])-currP
aDFmonth <- data.frame(
Amortization=c(P, currP[1:(length(currP)-1)]),
Payment=monthP+c((monthPay-monthP)[1:(length(monthP)-1)],0),
Principal=monthP,
Interest=c((monthPay-monthP)[1:(length(monthP)-1)],0),
Year=sort(rep(1:ceiling(N/prd), prd))[1:length(monthP)]
)
aDFyear <- data.frame(
Amortization=tapply(aDFmonth$Amortization, aDFmonth$Year, max),
Annual_Payment=tapply(aDFmonth$Payment, aDFmonth$Year, sum),
Annual_Principal=tapply(aDFmonth$Principal, aDFmonth$Year, sum),
Annual_Interest=tapply(aDFmonth$Interest, aDFmonth$Year, sum),
Year=as.vector(na.omit(unique(aDFmonth$Year)))
)
cat("The amortization data for each of the ", N," ", prdStr,"s are stored in \"amortPeriod\".\n\n",sep = "")
cat("The amortization data for each of the", L, "years are stored in \"amortYear\".\n\n")
rlist = c(rlist,amortYear = list(aDFyear),amortPeriod = list(aDFmonth))
}
if(plotData==T) {
barplot(t(aDFyear[,c(3,4)]),
col=c(3,4),
main="Annual Interest and Principal Payments",
sub="The data for this plot is stored in amortYear.",
xlab="Years", ylab="$ Amount",
legend.text=c("Principal", "Interest"),
ylim=c(0, max(aDFyear$Annual_Payment)*1.3))
}
}
return(rlist)
}
netIncome <- function(gross){
convert = FALSE
if (gross>1000) {
gross = gross/1000
convert = TRUE
}
net =   (max(0,min(gross,14)))*(1-.105-.017) +(max(14,min(gross,48))-14)*(1-.175-.017) + (max(48,min(gross,70))-48)*(1-.3-.017)+ (max(70,gross)-70)*(1-.33-.017)
if (convert) net = net*1000
return(net)
}
430000/3
430000*.3
135/3
23000*6
288*.4
285000000/4000
34000/52
1500*52
1500*52/.04
1500*52/.05
1500*52/.045
1500*52/.042
1500*52/.06
1500*52/.05
550*52/.05
? pdf
600*52/.05
800000/(600*52)
600*52/800000
92000/.05
92000/.03
250*4000000
240000/.06
240000/.07
280000/.04
260000/.05
178/48
193/55
46*3
430*.33
712/.007
712/.006
712/.005
712/.004
50000*0.002
50000*0.006
1200000*.025*5/365
1200/.02
15/515
800*2500
800*2500/40000
800*2500/30000
800*2500/33000
40000*.08
40000*.008
40000*.005
88000*.008
89000*.008
89500*.008
100000/2500
700000/2500
2400 - 2*(515+154)
2480 - 2*(515+154)
2480 - 2*(515+158)
100000/(45*5)
100000/(47*5)
1200/40000
1200/45000
1200/50000
2410/(730+350+2410)
50*20*5
840*12
2782*3000
2782/2*3000
2782/2
11*60
11*60/55
11*60/50
x = seq(from = -5, to = 10, by = 0.01)
x
plot(x, 2*x^3 - 5*x^2 + 3*x -1)
x = seq(from = -5, to = 5, by = 0.01)
plot(x, 2*x^3 - 5*x^2 + 3*x -1)
abline(h = 0)
plot(x, 20*x^3 - 50*x^2 + 3*x -1)
plot(x, 20*x^3 + 3*x -1)
plot(x, 20*x^3 - 50*x^2 + 3*x -1)
x = seq(from = -2, to = 2, by = 0.01)
plot(x, 20*x^3 - 50*x^2 + 3*x -1)
x = seq(from = -2, to = 3, by = 0.01)
plot(x, 20*x^3 - 50*x^2 + 3*x -1)
plot(x, 20*x^3 - 50*x^2 + 3*x -1)
abline(h = 0)
plot(x, 20*x^3 - 50*x^2 + 3*x - 0.5)
abline(h = 0)
plot(x, 20*x^3 - 50*x^2 + 3*x + 1)
abline(h = 0)
plot(x, 20*x^3 - 50*x^2 + 3*x + 10)
plot(x, 20*x^3 - 50*x^2 + 3*x + 20)
abline(h = 0)
x = 1
plot(x, 20*x^3 - 50*x^2 + 3*x + 20)
x = seq(from = -2, to = 3, by = 0.01)
plot(x, exp(x))
plot(x, exp(x/2) - exp(-0.6*x) - 4)
plot(x, exp(x/2) - exp(0.6*x) + 4)
x = seq(from = -2, to = 5, by = 0.01)
plot(x, exp(x/2) - exp(0.6*x) + 4)
240/.04
A = matrix(c(0,1,1,1,1,0),nrow = 3)
A
eigen(A)
eigen(A %*% t(A))
1/sqrt(6)
eigen(t(A) %*% A)
? eigen
300*1848*365
1848*365
library(scatterplot3d)
A = rbind(mtcars$wt,mtcars$disp,mtcars$mpg)
# centre the rows
for (i in 1:3) A[i,] = A[i,] - mean(A[i,])
# look at the dota
A
# better to plot it
scatterplot3d(t(A), pch = 19)
library(scatterplot3d)
A = matrix(c(-4, 3, -5, 18, 6, -5, 2, 6, -2, 10, 1, -1, 7, 11, 3, 6, 9, 3), byrow = T, nrow = 3)
A
for (i in 1:nrow(A)) A[i,] = A[i,] - mean(A[i,])
Sigma = (A %*% t(A))/(ncol(A) - 1)
ev = eigen(Sigma)
ev
library(xtable)
xtable(ev$vectors)
xtable(ev$vectors, x = )
? xtable
xtable(ev$vectors, digits = 2)
xtable(ev$vectors, digits = 4)
Sigma
ev$values
library(arm)
install.packages("arm")
library(arm)
help(package = "arm")
iq.data <- read.dta("http://www.stat.columbia.edu/~gelman/arm/examples/child.iq/child.iq.dta")
iq.data <- read("http://www.stat.columbia.edu/~gelman/arm/examples/child.iq/child.iq.dta")
iq.data <- read.table("http://www.stat.columbia.edu/~gelman/arm/examples/child.iq/child.iq.dta")
iq.data
library(foreign)
iq.data <- read.dta("http://www.stat.columbia.edu/~gelman/arm/examples/child.iq/child.iq.dta")
iq.data
iq.data <- read.dta("http://www.stat.columbia.edu/~gelman/arm/examples/child.iq/kidiq.dta")
iq <- read.dta("http://www.stat.columbia.edu/~gelman/arm/examples/child.iq/kidiq.dta")
iq
library(ggplot2)
qplot(x = mom_iq, y = kid_score, data = iq)
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in standarised test")
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in standarised test") + stat_smooth()
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in standarised test") + stat_smooth(method = lm)
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in standarised test") + stat_smooth(method = lm, se = F)
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in cognitive test") + stat_smooth(method = lm, se = F)
setwd("~/Dropbox/369 2017/notes/figures")
library(foreign)
library(ggplot2)
iq <- read.dta("http://www.stat.columbia.edu/~gelman/arm/examples/child.iq/kidiq.dta")
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in cognitive test")
ggsave("kidiq.pdf")
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in cognitive test") + stat_smooth(method = lm, se = F)
ggsave("kidiqlm.pdf")
library(foreign)
library(ggplot2)
iq <- read.dta("http://www.stat.columbia.edu/~gelman/arm/examples/child.iq/kidiq.dta")
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in cognitive test")  +
theme(text = element_text(size=20)
ggsave("kidiq.pdf")
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in cognitive test") + stat_smooth(method = lm, se = F)  +
theme(text = element_text(size=20)
ggsave("kidiqlm.pdf")
library(foreign)
library(ggplot2)
iq <- read.dta("http://www.stat.columbia.edu/~gelman/arm/examples/child.iq/kidiq.dta")
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in cognitive test")  +theme(text = element_text(size=20)
ggsave("kidiq.pdf")
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in cognitive test") + stat_smooth(method = lm, se = F)  + theme(text = element_text(size=20)
ggsave("kidiqlm.pdf")
source('~/Dropbox/369 2017/notes/figures/kidiqpics.R')
library(foreign)
library(ggplot2)
iq <- read.dta("http://www.stat.columbia.edu/~gelman/arm/examples/child.iq/kidiq.dta")
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in cognitive test")  +theme(text = element_text(size=28))
ggsave("kidiq.pdf")
qplot(x = mom_iq, y = kid_score, data = iq, xlab = "Mother's IQ score", ylab = "Child's score in cognitive test") + stat_smooth(method = lm, se = F)  + theme(text = element_text(size=28))
ggsave("kidiqlm.pdf")
